# 4 MB
dataBlockSizeBytes		= 4194304
# 16 MB
#dataBlockSizeBytes		= 16777216
# 32 MB
#dataBlockSizeBytes		= 33554432
# 128 MB
#dataBlockSizeBytes		= 134217728
# 512 MB
#dataBlockSizeBytes		= 536870912
# 4KB
#dataBlockSizeBytes		= 4096
#dataBlockSizeBytes		= 1024
# 64MB
#dataBlockSizeBytes		= 67108864

# 1MB
#segmentSizeBytes		= 1048576
# 4KB
#segmentSizeBytes		= 4096
# 16KB
segmentSizeBytes		= 16384
# 64KB
#segmentSizeBytes		= 65536
# 256 KB
#segmentSizeBytes		= 262144
# 32 MB
#segmentSizeBytes		= 33554432
# 2MB
#segmentSizeBytes		= 2097152
# 32KB
#segmentSizeBytes		= 32768
#segmentSizeBytes		= 512
#segmentSizeBytes		= 256

# Using a small number for testing only
#ibmapBlockSizeBytes	= 128
# 4KB
#ibmapBlockSizeBytes		= 4096
# 16KB
ibmapBlockSizeBytes		= 16384
# 32 KB
#ibmapBlockSizeBytes		= 32768
# 64 KB
#ibmapBlockSizeBytes		= 65536
#ibmapBlockSizeBytes	= 256

# Using a small number for testing only
ibmapsPerMachine		= 2

# Using a small number for testing only
#inodesBlockSizeBytes	= 64
# 4KB
#inodesBlockSizeBytes	= 4096
# 16KB
inodesBlockSizeBytes	= 16384
# 32KB
#inodesBlockSizeBytes	= 32768
# 64 KB
#inodesBlockSizeBytes	= 65536
#inodesBlockSizeBytes	= 4194304

# Emulating index in the Inode
#inodeSizeBytes			= 32

inodeSizeBytes			= 64
#Number of blocks include ibmap and inode blocks that has a smaller size than the data blocks and inode blocks
# Configure this number as the sum of all types of blocks. Ibmap and inodeblocks are created during system intialization
# and are never deleted.
# For 16MB data blocks
# maxBlocksPerLocalDevice	= 21250
# for 32MB Blocks (79*1024/32 + 1026) = 3554
#maxBlocksPerLocalDevice	= 3554
# for 4MB, 21250 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# 83 GB space
#maxBlocksPerLocalDevice	= 21250
# 16MB chunks, 80GB per device
#maxBlocksPerLocalDevice	= 5120
# 25GB
maxBlocksPerLocalDevice	= 6400
#for testing
#maxBlocksPerLocalDevice	= 4498

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#numLocalDevices	= 3
numLocalDevices	= 1

#Size of the cache in MiB.
#cacheSizeMiB	       	= 4096
# 16GiB # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#cacheSizeMiB	       	= 16384
# 8GiB
cacheSizeMiB	       	= 8192
# 24 GiB
#cacheSizeMiB	       	= 24576
# 32 GiB
#cacheSizeMiB	       	= 32768

#Expire data fetched from the global store after dataExpiryTimeoutMs
dataSegmentFetchExpiryTimeoutMs  = 3000

inodesBlockFetchExpiryTimeoutMs  = 1

#indexBlockSizeBytes = 65536

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#numWorkersStoreToGlobal	= 5
numWorkersStoreToGlobal	= 8

# Post-order heap index
# Each node has two portions. One portion is for index entries and the other is for pointers to the children.
# Node size is the same as segmentSizeBytes
# ---------------------
#percentIndexEntriesPerNode = 70
# We are now using branching factor of 2, which seems to be optimal

# Underlying storage settings
# ---------------------------
# Folders in the underlying filesystem

# Folder where actual files are created; the following sub-folders are auto-created: ibmaps, inodes, blocks, and namespace
basePath		= fs

# ZooKeeper cluster settings
#---------------------------

zkMainClusterID	= 1

# CSV list of ip:port of ZooKeeper nodes
#zkMainServers	= 10.10.0.1:2181,10.10.0.1:2182,10.10.0.1:2183
zkMainServers	= 10.162.0.7:2181,10.162.0.7:2182,10.162.0.7:2183

# minio settings (S3 emulator)
# ----------------------------

#minioServers	= http://10.10.0.1:9000
#minioServers	= http://10.10.0.1:9000,http://10.10.0.2:9000,http://10.10.0.3:9000,http://10.10.0.13:9000
#minioServers	= http://10.10.0.1:9000,http://10.10.0.2:9000,http://10.10.0.3:9000
#minioServers	= http://10.10.0.1:9000,http://10.10.0.2:9000
minioServers    = https://s3.ca-central-1.amazonaws.com

#Length must be at least 5 characters long. This should match minio server settings.
#minioAccessKey	= kawkab
minioAccessKey	= AKIA5C4WEOCAKUHDCGT6


#Length must be at least 8 characters long. This should match minio server settings.
#minioSecretKey	= kawkabsecret
minioSecretKey	= UeSQNM0R9uhG3fk6P79b86FllBuNqsTiJB5ER1hX

# Thrift RPC service for reading data from the primary nodes
primaryNodeServicePort = 22332

# RPC service for the filesystem clients
fsServerListenPort	= 33433

# Make sure to match the buffer length in PrimaryNodeServiceClient and FilesystemServiceClient
# in bytes -
# 16KB
#maxBufferLen		= 16384
# 32KB
#maxBufferLen		= 32768
# 500KB
#maxBufferLen		= 512000
# 1MB
#maxBufferLen		= 1048576
# 2MB
#maxBufferLen        = 2097152
# 4MB
maxBufferLen		= 4194304
# 6MB
#maxBufferLen		= 6291456
# 8 MB
#maxBufferLen		= 8388608
# 12 MB
#maxBufferLen		= 12582912
# 16MB
#maxBufferLen		= 16777216
# 32 MB
#maxBufferLen		= 33554432

# Kawkab nodes list in the form of node.<id>=<ip>
# -------------------------------------------------
# Number of Kawkab nodes
nodesCount = 2
#node.0 = 10.10.0.2
#node.1 = 10.10.0.11
#node.2 = 10.10.0.12
#node.3 = 10.10.0.13
#node.4 = 10.10.0.9
node.0 = 10.162.0.16
node.1 = 10.162.0.26